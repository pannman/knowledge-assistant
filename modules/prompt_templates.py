"""
プロンプトテンプレートモジュール
Chain-of-Thought、Few-shot学習、構造化出力を組み込んだプロンプトテンプレート
"""

import json
from typing import Dict, Any, List


# FAQ生成用のスキーマ定義
FAQ_SCHEMA = {
    "type": "array",
    "items": {
        "type": "object",
        "properties": {
            "question": {
                "type": "string",
                "description": "ユーザーが尋ねる可能性のある質問"
            },
            "answer": {
                "type": "string",
                "description": "質問に対する明確かつ具体的な回答"
            }
        },
        "required": ["question", "answer"]
    }
}


class PromptBuilder:
    """プロンプト生成ユーティリティ"""
    
    @staticmethod
    def get_pdf_faq_prompt(text: str, context: str = "") -> str:
        """
        PDFテキスト用のFAQ生成プロンプト
        Chain-of-Thoughtと Few-shot例を組み込み
        
        Args:
            text: 処理済みPDFテキスト
            context: 追加コンテキスト情報
            
        Returns:
            プロンプト文字列
        """
        # スキーマを文字列化
        schema_str = json.dumps(FAQ_SCHEMA, indent=2, ensure_ascii=False)
        
        # Few-shot例
        few_shot_examples = """
例1:
マニュアルテキスト: 
「VPNアクセスを設定するには、まずCisco AnyConnectクライアントをインストールします。インストール後、アドレス欄に「vpn.company.co.jp」と入力し、社員IDとパスワードでログインします。2要素認証が有効な場合は、スマートフォンの認証アプリに表示されるコードも入力する必要があります。」

思考過程:
このテキストはVPN接続の設定手順について説明しています。ユーザーが知りたい可能性のある情報を考えます。
1. 必要なソフトウェア: Cisco AnyConnectクライアント
2. 接続先アドレス: vpn.company.co.jp
3. 認証方法: 社員ID、パスワード、2要素認証
4. 手順: インストール→アドレス入力→認証情報入力
5. 想定される質問: 接続方法、必要なもの、トラブルシューティング

生成されるFAQ:
[
  {
    "question": "VPN接続に必要なソフトウェアは何ですか？",
    "answer": "Cisco AnyConnectクライアントが必要です。まずこのソフトウェアをインストールしてから接続設定を行います。"
  },
  {
    "question": "VPN接続先のアドレスは何ですか？",
    "answer": "接続先アドレスは「vpn.company.co.jp」です。Cisco AnyConnectクライアントのアドレス欄にこれを入力してください。"
  },
  {
    "question": "VPN接続の認証方法を教えてください",
    "answer": "社員IDとパスワードでの認証が必要です。また、2要素認証が有効になっている場合は、スマートフォンの認証アプリに表示されるコードも入力する必要があります。"
  }
]

例2:
マニュアルテキスト:
「経費精算システムにアクセスするには、イントラネットポータルからFinance > Expense Claimsと進みます。新規申請を行う場合は「New Claim」ボタンをクリックし、必要事項を入力します。レシートは5,000円以上の経費に対して必須です。承認フローは、直属の上司→部門マネージャー→経理部となります。」

思考過程:
このテキストは経費精算の手順について説明しています。ユーザーが知りたい可能性のある情報を考えます。
1. アクセス方法: イントラネットポータル→Finance→Expense Claims
2. 申請手順: 「New Claim」ボタン→必要事項入力
3. 条件: レシートは5,000円以上の経費に必須
4. 承認フロー: 直属上司→部門マネージャー→経理部
5. 想定される質問: システムの使い方、必要書類、承認プロセス

生成されるFAQ:
[
  {
    "question": "経費精算システムにはどうやってアクセスしますか？",
    "answer": "イントラネットポータルにログインし、Finance > Expense Claimsメニューと進むとアクセスできます。"
  },
  {
    "question": "経費申請には領収書が必要ですか？",
    "answer": "5,000円以上の経費に対しては領収書の提出が必須です。5,000円未満の場合は不要ですが、保管しておくことをお勧めします。"
  },
  {
    "question": "経費申請の承認フローはどうなっていますか？",
    "answer": "申請後、直属の上司→部門マネージャー→経理部の順に承認が行われます。全ての承認が完了すると払い戻しが処理されます。"
  }
]
"""
        
        # Chain of Thoughtプロンプト
        return f"""
あなたは技術マニュアルや手順書からFAQを抽出するエキスパートです。以下の社内マニュアルまたは技術文書を分析し、よくある質問と回答のペアを5〜10個生成してください。

## 入力テキスト
{text}

## 追加コンテキスト
{context}

## 指示
1. まず文書の内容を分析し、主要なトピック、手順、重要ポイントを特定してください。
2. 次に社員が実際に尋ねそうな質問を考えてください。特に以下の種類の質問を含めるようにしてください：
   - 具体的な手順に関する質問（「どうやって〜しますか？」）
   - 理由を問う質問（「なぜ〜なのですか？」）
   - トラブルシューティングの質問（「〜が動かない場合はどうすればいいですか？」）
   - 条件付きの質問（「〜の場合はどうなりますか？」）
3. それぞれの質問に対して、明確で具体的、かつ実用的な回答を作成してください。
4. 思考過程を明確にしてから、最終的なFAQリストを作成してください。

## 出力形式
思考過程を示した後、以下のJSONスキーマに従った配列形式でFAQを出力してください：

{schema_str}

## 例
{few_shot_examples}

## あなたの回答
思考過程:
"""
    
    @staticmethod
    def get_slack_faq_prompt(text: str, context: str = "") -> str:
        """
        Slack会話用のFAQ生成プロンプト
        Chain-of-Thoughtと Few-shot例を組み込み
        
        Args:
            text: 処理済みSlack会話テキスト
            context: 追加コンテキスト情報
            
        Returns:
            プロンプト文字列
        """
        # スキーマを文字列化
        schema_str = json.dumps(FAQ_SCHEMA, indent=2, ensure_ascii=False)
        
        # Few-shot例
        few_shot_examples = """
例1:
Slack会話:
「
田中: データ分析レポートの提出期限はいつでしたっけ？
佐藤: 今月の20日までですよ。フォーマットは先週送ったテンプレートを使ってください。
田中: ありがとう！データソースはBIツールのどのダッシュボードを使えばいいですか？
佐藤: 「四半期売上分析」ダッシュボードから先月のデータをエクスポートしてください。アクセス権限が必要なら山田さんに連絡してください。
」

思考過程:
この会話から以下の情報が得られます：
1. データ分析レポートに関する会話
2. 提出期限：今月20日
3. 使用すべきフォーマット：先週送付されたテンプレート
4. データソース：BIツールの「四半期売上分析」ダッシュボード
5. アクセス権限の問題が生じた場合の対応：山田さんに連絡

質問と回答のパターンが明確に見られます：
- 質問1：提出期限について（田中→佐藤）
- 質問2：データソースについて（田中→佐藤）

そこから派生する可能性のある質問も考えられます：
- テンプレートの入手方法
- レポートの提出先
- 過去のデータとの比較方法

生成されるFAQ:
[
  {
    "question": "データ分析レポートの提出期限はいつですか？",
    "answer": "今月の20日までです。期限厳守でお願いします。"
  },
  {
    "question": "データ分析レポートはどのフォーマットで作成すればよいですか？",
    "answer": "先週送付されたテンプレートを使用してください。テンプレートが見つからない場合は佐藤までご連絡ください。"
  },
  {
    "question": "データ分析に必要なデータはどこから取得できますか？",
    "answer": "BIツールの「四半期売上分析」ダッシュボードから先月のデータをエクスポートしてください。"
  },
  {
    "question": "BIツールにアクセスできない場合はどうすればよいですか？",
    "answer": "アクセス権限が必要な場合は山田さんに連絡して、権限を付与してもらってください。"
  }
]

例2:
Slack会話:
「
鈴木: 新しいクラウドストレージの容量制限はどのくらいですか？
山本: 一般社員は50GB、管理職は100GBです。特別な理由がある場合は申請すれば増やせます。
鈴木: 申請はどこでできますか？
山本: ITポータルの「リソース申請」から行えます。承認には1-2営業日かかります。
井上: 部署共有フォルダも同じ制限がありますか？
山本: いいえ、部署共有は500GBからスタートで、使用率が80%を超えると自動的に通知が来ます。
」

思考過程:
この会話から以下の情報が得られます：
1. クラウドストレージの容量制限について
   - 一般社員: 50GB
   - 管理職: 100GB
   - 部署共有: 500GB～
2. 容量増加申請方法: ITポータルの「リソース申請」
3. 申請承認期間: 1-2営業日
4. 部署共有フォルダの通知: 使用率80%で自動通知

会話には3人が参加し、複数の質問と回答が交わされています：
- 質問1: クラウドストレージの容量制限（鈴木→山本）
- 質問2: 申請方法（鈴木→山本）
- 質問3: 部署共有フォルダの制限（井上→山本）

派生する可能性のある質問：
- 容量超過時の対応
- データの移行方法
- バックアップポリシー

生成されるFAQ:
[
  {
    "question": "社員のクラウドストレージ容量制限はいくらですか？",
    "answer": "一般社員は50GB、管理職は100GBの容量が割り当てられています。"
  },
  {
    "question": "クラウドストレージの容量を増やすにはどうすればよいですか？",
    "answer": "ITポータルの「リソース申請」から申請できます。特別な理由を記載する必要があり、承認には1-2営業日かかります。"
  },
  {
    "question": "部署共有フォルダの容量制限はありますか？",
    "answer": "部署共有フォルダは500GBから始まり、個人用とは異なる制限があります。使用率が80%を超えると自動的に通知が送信されます。"
  }
]
"""
        
        # Chain of Thoughtプロンプト
        return f"""
あなたは会話形式のやり取りからFAQを抽出・作成するエキスパートです。以下のSlack会話を分析し、重要な質問と回答のペアを抽出または生成してください。

## 入力テキスト（Slack会話）
{text}

## 追加コンテキスト
{context}

## 指示
1. まず会話全体を読み、主要なトピックと情報の流れを把握してください。
2. 会話の中で実際に質問と回答が行われている部分を特定し、その内容を整理してください。
3. 会話から明示的に読み取れる情報だけでなく、暗黙的に示されている情報も考慮してください。
4. 会話の流れから、実際には尋ねられていないが関連して尋ねられる可能性のある質問も考えてください。
5. 組織の文脈や専門用語を考慮し、質問と回答を社内向けFAQとして適切に表現してください。
6. 思考過程を明確にしてから、最終的なFAQリストを作成してください。

## 出力形式
思考過程を示した後、以下のJSONスキーマに従った配列形式でFAQを出力してください：

{schema_str}

## 例
{few_shot_examples}

## あなたの回答
思考過程:
"""
    
    @staticmethod
    def get_generic_faq_prompt(text: str, context: str = "") -> str:
        """
        汎用的なFAQ生成プロンプト
        Chain-of-Thoughtと Few-shot例を組み込み
        
        Args:
            text: 処理済みテキスト
            context: 追加コンテキスト情報
            
        Returns:
            プロンプト文字列
        """
        # スキーマを文字列化
        schema_str = json.dumps(FAQ_SCHEMA, indent=2, ensure_ascii=False)
        
        # Few-shot例
        few_shot_examples = """
例:
テキスト:
「社内Wi-Fiネットワークのパスワードは四半期ごとに更新されます。新しいパスワードはIT部門から全社メールで通知されます。また、社内ポータルの「IT情報」ページでも確認できます。接続できない場合は、デバイスを再起動するか、IT部門のヘルプデスク（内線:1234）にお問い合わせください。」

思考過程:
このテキストはWi-Fiパスワードの更新と接続問題に関する情報です。以下のポイントが含まれています：
1. パスワード更新頻度: 四半期ごと
2. パスワード通知方法: 全社メールとポータルサイト
3. トラブルシューティング: デバイス再起動とヘルプデスク連絡

想定される質問:
- パスワード更新のタイミング
- パスワードの入手方法
- 接続問題の解決方法
- ヘルプデスクの連絡先

生成されるFAQ:
[
  {
    "question": "社内Wi-Fiのパスワードはどのくらいの頻度で変更されますか？",
    "answer": "パスワードは四半期ごとに更新されます。"
  },
  {
    "question": "新しいWi-Fiパスワードはどうやって確認できますか？",
    "answer": "新しいパスワードはIT部門からの全社メールで通知されます。また、社内ポータルの「IT情報」ページでも確認できます。"
  },
  {
    "question": "Wi-Fiに接続できない場合はどうすればよいですか？",
    "answer": "まずデバイスを再起動してみてください。それでも接続できない場合は、IT部門のヘルプデスク（内線:1234）にお問い合わせください。"
  }
]
"""
        
        # Chain of Thoughtプロンプト
        return f"""
あなたは与えられたテキストからFAQを生成するエキスパートです。以下のテキストを分析し、想定される質問と回答のペアを5つ以上生成してください。

## 入力テキスト
{text}

## 追加コンテキスト
{context}

## 指示
1. まずテキスト全体を読み、含まれる主要な情報と重要ポイントを特定してください。
2. 読者が知りたいと思われる情報を考え、適切な質問を作成してください。
3. 各質問に対して、テキストの情報を元に明確で具体的な回答を作成してください。
4. 質問と回答のペアは、テキストの内容を網羅するようにしてください。
5. 思考過程を明確にしてから、最終的なFAQリストを作成してください。

## 出力形式
思考過程を示した後、以下のJSONスキーマに従った配列形式でFAQを出力してください：

{schema_str}

## 例
{few_shot_examples}

## あなたの回答
思考過程:
"""